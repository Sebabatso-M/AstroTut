---
interface Props {
    activeColor?: string;
    headings: string[];
    contents: string[];
}

const { activeColor = '#A741FF', headings, contents } = Astro.props as Props;
---

<!-- Tabs -->
<div class='tabs'>
    <ul class='tabs-header'>
        {
            headings.map((heading) => {
                return <li>{heading}</li>;
            })
        }
    </ul>
    <ul class='tabs-content'>
        {
            contents.map((content) => {
                return (
                    <li class='tab'>
                        <code>{content}</code>
                    </li>
                );
            })
        }
    </ul>
</div>

<style>
    /* Tabs */
    .tabs {
        margin-top: 30px;
    }

    .tabs-header {
        display: flex;
        background: #333;
        color: #fff;
        padding: 10px 20px;
    }

    .tabs-header li {
        margin-right: 20px;
        cursor: pointer;
    }

    .tabs-content {
        font-size: 18px;
        padding: 20px;
        border: 1px solid #333;
        font-weight: bold;
        background: #f4f4f4;
    }
</style>

<script define:vars={{ activeColor }}>
    function createTabs(element) {
        const header = element.querySelector('.tabs-header');
        const content = element.querySelector('.tabs-content');

        // NPM, PNPM, YARN
        const tab_headers = [...header.children];

        // list items containing the code elements
        const tab_contents = [...content.children];

        // hides all content text
        tab_contents.forEach((x) => (x.style.display = 'none'));
        let current_tab_index = -1;

        // sets the current index to the index of the selected item
        // adds styling to the text also
        // the index of tab headers .i.e 0,1,2
        function setTab(index) {
            // resets styling of tab
            // works because all headers have index of > -1
            if (current_tab_index > -1) {
                tab_headers[current_tab_index].style.fontWeight = 400;
                tab_headers[current_tab_index].style.color = '#fff';
                tab_contents[current_tab_index].style.display = 'none';
            }

            tab_headers[index].style.fontWeight = 800;
            tab_headers[index].style.color = activeColor;
            tab_contents[index].style.display = 'flex';
            current_tab_index = index;
        }

        // NOTE THIS SECTION IS JUST FOR THE INITIAL PHASE
        // returns the index of NPM due to it containing the default class
        // index of NPM = 0
        // NOTE: STOPS RUNNING AS SOON AS IT HAS FOUND THE INDEX
        let default_tab_index = tab_headers.findIndex((x) => {
            // returns the index of default-tab which is 0
            // hence returning true
            let arr = [...x.classList].indexOf('default-tab') > -1;

            return arr;
        });

        // will return 0 because default... is never -1
        default_tab_index = default_tab_index === -1 ? 0 : default_tab_index;

        setTab(default_tab_index);

        // add eventlistener
        tab_headers.forEach((x, i) => (x.onclick = (event) => setTab(i)));
    }

    // Run
    [...document.querySelectorAll('.tabs')].forEach((x) => createTabs(x));
</script>
